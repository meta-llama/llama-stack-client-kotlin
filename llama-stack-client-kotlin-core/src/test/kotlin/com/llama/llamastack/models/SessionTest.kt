// File generated from our OpenAPI spec by Stainless.

package com.llama.llamastack.models

import com.llama.llamastack.core.JsonValue
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class SessionTest {

    @Test
    fun createSession() {
        val session =
            Session.builder()
                .sessionId("session_id")
                .sessionName("session_name")
                .startedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .turns(
                    listOf(
                        Turn.builder()
                            .inputMessages(
                                listOf(
                                    Turn.InputMessage.ofUserMessage(
                                        UserMessage.builder()
                                            .content(InterleavedContent.ofString("string"))
                                            .role(UserMessage.Role.USER)
                                            .context(InterleavedContent.ofString("string"))
                                            .build()
                                    )
                                )
                            )
                            .outputAttachments(
                                listOf(
                                    Turn.OutputAttachment.builder()
                                        .content(Turn.OutputAttachment.Content.ofString("string"))
                                        .mimeType("mime_type")
                                        .build()
                                )
                            )
                            .outputMessage(
                                Turn.OutputMessage.builder()
                                    .content(InterleavedContent.ofString("string"))
                                    .role(Turn.OutputMessage.Role.ASSISTANT)
                                    .stopReason(Turn.OutputMessage.StopReason.END_OF_TURN)
                                    .toolCalls(
                                        listOf(
                                            ToolCall.builder()
                                                .arguments(
                                                    ToolCall.Arguments.builder()
                                                        .putAdditionalProperty(
                                                            "foo",
                                                            JsonValue.from("string")
                                                        )
                                                        .build()
                                                )
                                                .callId("call_id")
                                                .toolName(ToolCall.ToolName.BRAVE_SEARCH)
                                                .build()
                                        )
                                    )
                                    .build()
                            )
                            .sessionId("session_id")
                            .startedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .steps(
                                listOf(
                                    Turn.Step.ofInferenceStep(
                                        InferenceStep.builder()
                                            .modelResponse(
                                                InferenceStep.ModelResponse.builder()
                                                    .content(InterleavedContent.ofString("string"))
                                                    .role(
                                                        InferenceStep.ModelResponse.Role.ASSISTANT
                                                    )
                                                    .stopReason(
                                                        InferenceStep.ModelResponse.StopReason
                                                            .END_OF_TURN
                                                    )
                                                    .toolCalls(
                                                        listOf(
                                                            ToolCall.builder()
                                                                .arguments(
                                                                    ToolCall.Arguments.builder()
                                                                        .putAdditionalProperty(
                                                                            "foo",
                                                                            JsonValue.from("string")
                                                                        )
                                                                        .build()
                                                                )
                                                                .callId("call_id")
                                                                .toolName(
                                                                    ToolCall.ToolName.BRAVE_SEARCH
                                                                )
                                                                .build()
                                                        )
                                                    )
                                                    .build()
                                            )
                                            .stepId("step_id")
                                            .stepType(InferenceStep.StepType.INFERENCE)
                                            .turnId("turn_id")
                                            .completedAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .startedAt(
                                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                            )
                                            .build()
                                    )
                                )
                            )
                            .turnId("turn_id")
                            .completedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                )
                .memoryBank(
                    Session.MemoryBank.ofVectorMemoryBank(
                        Session.MemoryBank.VectorMemoryBank.builder()
                            .chunkSizeInTokens(0L)
                            .embeddingModel("embedding_model")
                            .identifier("identifier")
                            .memoryBankType(
                                Session.MemoryBank.VectorMemoryBank.MemoryBankType.VECTOR
                            )
                            .providerId("provider_id")
                            .providerResourceId("provider_resource_id")
                            .type(Session.MemoryBank.VectorMemoryBank.Type.MEMORY_BANK)
                            .embeddingDimension(0L)
                            .overlapSizeInTokens(0L)
                            .build()
                    )
                )
                .build()
        assertThat(session).isNotNull
        assertThat(session.sessionId()).isEqualTo("session_id")
        assertThat(session.sessionName()).isEqualTo("session_name")
        assertThat(session.startedAt()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(session.turns())
            .containsExactly(
                Turn.builder()
                    .inputMessages(
                        listOf(
                            Turn.InputMessage.ofUserMessage(
                                UserMessage.builder()
                                    .content(InterleavedContent.ofString("string"))
                                    .role(UserMessage.Role.USER)
                                    .context(InterleavedContent.ofString("string"))
                                    .build()
                            )
                        )
                    )
                    .outputAttachments(
                        listOf(
                            Turn.OutputAttachment.builder()
                                .content(Turn.OutputAttachment.Content.ofString("string"))
                                .mimeType("mime_type")
                                .build()
                        )
                    )
                    .outputMessage(
                        Turn.OutputMessage.builder()
                            .content(InterleavedContent.ofString("string"))
                            .role(Turn.OutputMessage.Role.ASSISTANT)
                            .stopReason(Turn.OutputMessage.StopReason.END_OF_TURN)
                            .toolCalls(
                                listOf(
                                    ToolCall.builder()
                                        .arguments(
                                            ToolCall.Arguments.builder()
                                                .putAdditionalProperty(
                                                    "foo",
                                                    JsonValue.from("string")
                                                )
                                                .build()
                                        )
                                        .callId("call_id")
                                        .toolName(ToolCall.ToolName.BRAVE_SEARCH)
                                        .build()
                                )
                            )
                            .build()
                    )
                    .sessionId("session_id")
                    .startedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .steps(
                        listOf(
                            Turn.Step.ofInferenceStep(
                                InferenceStep.builder()
                                    .modelResponse(
                                        InferenceStep.ModelResponse.builder()
                                            .content(InterleavedContent.ofString("string"))
                                            .role(InferenceStep.ModelResponse.Role.ASSISTANT)
                                            .stopReason(
                                                InferenceStep.ModelResponse.StopReason.END_OF_TURN
                                            )
                                            .toolCalls(
                                                listOf(
                                                    ToolCall.builder()
                                                        .arguments(
                                                            ToolCall.Arguments.builder()
                                                                .putAdditionalProperty(
                                                                    "foo",
                                                                    JsonValue.from("string")
                                                                )
                                                                .build()
                                                        )
                                                        .callId("call_id")
                                                        .toolName(ToolCall.ToolName.BRAVE_SEARCH)
                                                        .build()
                                                )
                                            )
                                            .build()
                                    )
                                    .stepId("step_id")
                                    .stepType(InferenceStep.StepType.INFERENCE)
                                    .turnId("turn_id")
                                    .completedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .startedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                    .build()
                            )
                        )
                    )
                    .turnId("turn_id")
                    .completedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(session.memoryBank())
            .isEqualTo(
                Session.MemoryBank.ofVectorMemoryBank(
                    Session.MemoryBank.VectorMemoryBank.builder()
                        .chunkSizeInTokens(0L)
                        .embeddingModel("embedding_model")
                        .identifier("identifier")
                        .memoryBankType(Session.MemoryBank.VectorMemoryBank.MemoryBankType.VECTOR)
                        .providerId("provider_id")
                        .providerResourceId("provider_resource_id")
                        .type(Session.MemoryBank.VectorMemoryBank.Type.MEMORY_BANK)
                        .embeddingDimension(0L)
                        .overlapSizeInTokens(0L)
                        .build()
                )
            )
    }
}
