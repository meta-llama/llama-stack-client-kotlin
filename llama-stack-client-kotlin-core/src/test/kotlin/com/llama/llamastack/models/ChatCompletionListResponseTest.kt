// File generated from our OpenAPI spec by Stainless.

package com.llama.llamastack.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.llama.llamastack.core.jsonMapper
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class ChatCompletionListResponseTest {

    @Test
    fun create() {
        val chatCompletionListResponse =
            ChatCompletionListResponse.builder()
                .addData(
                    ChatCompletionListResponse.Data.builder()
                        .id("id")
                        .addChoice(
                            ChatCompletionListResponse.Data.Choice.builder()
                                .finishReason("finish_reason")
                                .index(0L)
                                .message(
                                    ChatCompletionListResponse.Data.Choice.Message.User.builder()
                                        .content("string")
                                        .name("name")
                                        .build()
                                )
                                .logprobs(
                                    ChatCompletionListResponse.Data.Choice.Logprobs.builder()
                                        .addContent(
                                            ChatCompletionListResponse.Data.Choice.Logprobs.Content
                                                .builder()
                                                .token("token")
                                                .logprob(0.0)
                                                .addTopLogprob(
                                                    ChatCompletionListResponse.Data.Choice.Logprobs
                                                        .Content
                                                        .TopLogprob
                                                        .builder()
                                                        .token("token")
                                                        .logprob(0.0)
                                                        .addByte(0L)
                                                        .build()
                                                )
                                                .addByte(0L)
                                                .build()
                                        )
                                        .addRefusal(
                                            ChatCompletionListResponse.Data.Choice.Logprobs.Refusal
                                                .builder()
                                                .token("token")
                                                .logprob(0.0)
                                                .addTopLogprob(
                                                    ChatCompletionListResponse.Data.Choice.Logprobs
                                                        .Refusal
                                                        .TopLogprob
                                                        .builder()
                                                        .token("token")
                                                        .logprob(0.0)
                                                        .addByte(0L)
                                                        .build()
                                                )
                                                .addByte(0L)
                                                .build()
                                        )
                                        .build()
                                )
                                .build()
                        )
                        .created(0L)
                        .addInputMessage(
                            ChatCompletionListResponse.Data.InputMessage.User.builder()
                                .content("string")
                                .name("name")
                                .build()
                        )
                        .model("model")
                        .build()
                )
                .firstId("first_id")
                .hasMore(true)
                .lastId("last_id")
                .build()

        assertThat(chatCompletionListResponse.data())
            .containsExactly(
                ChatCompletionListResponse.Data.builder()
                    .id("id")
                    .addChoice(
                        ChatCompletionListResponse.Data.Choice.builder()
                            .finishReason("finish_reason")
                            .index(0L)
                            .message(
                                ChatCompletionListResponse.Data.Choice.Message.User.builder()
                                    .content("string")
                                    .name("name")
                                    .build()
                            )
                            .logprobs(
                                ChatCompletionListResponse.Data.Choice.Logprobs.builder()
                                    .addContent(
                                        ChatCompletionListResponse.Data.Choice.Logprobs.Content
                                            .builder()
                                            .token("token")
                                            .logprob(0.0)
                                            .addTopLogprob(
                                                ChatCompletionListResponse.Data.Choice.Logprobs
                                                    .Content
                                                    .TopLogprob
                                                    .builder()
                                                    .token("token")
                                                    .logprob(0.0)
                                                    .addByte(0L)
                                                    .build()
                                            )
                                            .addByte(0L)
                                            .build()
                                    )
                                    .addRefusal(
                                        ChatCompletionListResponse.Data.Choice.Logprobs.Refusal
                                            .builder()
                                            .token("token")
                                            .logprob(0.0)
                                            .addTopLogprob(
                                                ChatCompletionListResponse.Data.Choice.Logprobs
                                                    .Refusal
                                                    .TopLogprob
                                                    .builder()
                                                    .token("token")
                                                    .logprob(0.0)
                                                    .addByte(0L)
                                                    .build()
                                            )
                                            .addByte(0L)
                                            .build()
                                    )
                                    .build()
                            )
                            .build()
                    )
                    .created(0L)
                    .addInputMessage(
                        ChatCompletionListResponse.Data.InputMessage.User.builder()
                            .content("string")
                            .name("name")
                            .build()
                    )
                    .model("model")
                    .build()
            )
        assertThat(chatCompletionListResponse.firstId()).isEqualTo("first_id")
        assertThat(chatCompletionListResponse.hasMore()).isEqualTo(true)
        assertThat(chatCompletionListResponse.lastId()).isEqualTo("last_id")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val chatCompletionListResponse =
            ChatCompletionListResponse.builder()
                .addData(
                    ChatCompletionListResponse.Data.builder()
                        .id("id")
                        .addChoice(
                            ChatCompletionListResponse.Data.Choice.builder()
                                .finishReason("finish_reason")
                                .index(0L)
                                .message(
                                    ChatCompletionListResponse.Data.Choice.Message.User.builder()
                                        .content("string")
                                        .name("name")
                                        .build()
                                )
                                .logprobs(
                                    ChatCompletionListResponse.Data.Choice.Logprobs.builder()
                                        .addContent(
                                            ChatCompletionListResponse.Data.Choice.Logprobs.Content
                                                .builder()
                                                .token("token")
                                                .logprob(0.0)
                                                .addTopLogprob(
                                                    ChatCompletionListResponse.Data.Choice.Logprobs
                                                        .Content
                                                        .TopLogprob
                                                        .builder()
                                                        .token("token")
                                                        .logprob(0.0)
                                                        .addByte(0L)
                                                        .build()
                                                )
                                                .addByte(0L)
                                                .build()
                                        )
                                        .addRefusal(
                                            ChatCompletionListResponse.Data.Choice.Logprobs.Refusal
                                                .builder()
                                                .token("token")
                                                .logprob(0.0)
                                                .addTopLogprob(
                                                    ChatCompletionListResponse.Data.Choice.Logprobs
                                                        .Refusal
                                                        .TopLogprob
                                                        .builder()
                                                        .token("token")
                                                        .logprob(0.0)
                                                        .addByte(0L)
                                                        .build()
                                                )
                                                .addByte(0L)
                                                .build()
                                        )
                                        .build()
                                )
                                .build()
                        )
                        .created(0L)
                        .addInputMessage(
                            ChatCompletionListResponse.Data.InputMessage.User.builder()
                                .content("string")
                                .name("name")
                                .build()
                        )
                        .model("model")
                        .build()
                )
                .firstId("first_id")
                .hasMore(true)
                .lastId("last_id")
                .build()

        val roundtrippedChatCompletionListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(chatCompletionListResponse),
                jacksonTypeRef<ChatCompletionListResponse>(),
            )

        assertThat(roundtrippedChatCompletionListResponse).isEqualTo(chatCompletionListResponse)
    }
}
