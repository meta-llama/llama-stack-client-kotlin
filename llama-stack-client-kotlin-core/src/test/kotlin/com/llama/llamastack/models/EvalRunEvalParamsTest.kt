// File generated from our OpenAPI spec by Stainless.

package com.llama.llamastack.models

import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class EvalRunEvalParamsTest {

    @Test
    fun createEvalRunEvalParams() {
        EvalRunEvalParams.builder()
            .taskConfig(
                EvalRunEvalParams.TaskConfig.ofBenchmarkEvalTaskConfig(
                    EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.builder()
                        .evalCandidate(
                            EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.EvalCandidate
                                .ofModelCandidate(
                                    EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig
                                        .EvalCandidate
                                        .ModelCandidate
                                        .builder()
                                        .model("model")
                                        .samplingParams(
                                            SamplingParams.builder()
                                                .strategy(
                                                    SamplingParams.Strategy
                                                        .ofGreedySamplingStrategy(
                                                            SamplingParams.Strategy
                                                                .GreedySamplingStrategy
                                                                .builder()
                                                                .type(
                                                                    SamplingParams.Strategy
                                                                        .GreedySamplingStrategy
                                                                        .Type
                                                                        .GREEDY
                                                                )
                                                                .build()
                                                        )
                                                )
                                                .maxTokens(0L)
                                                .repetitionPenalty(0.0)
                                                .build()
                                        )
                                        .type(
                                            EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig
                                                .EvalCandidate
                                                .ModelCandidate
                                                .Type
                                                .MODEL
                                        )
                                        .systemMessage(
                                            SystemMessage.builder()
                                                .content(InterleavedContent.ofString("string"))
                                                .role(SystemMessage.Role.SYSTEM)
                                                .build()
                                        )
                                        .build()
                                )
                        )
                        .type(EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.Type.BENCHMARK)
                        .numExamples(0L)
                        .build()
                )
            )
            .taskId("task_id")
            .xLlamaStackClientVersion("X-LlamaStack-Client-Version")
            .xLlamaStackProviderData("X-LlamaStack-Provider-Data")
            .build()
    }

    @Test
    fun getBody() {
        val params =
            EvalRunEvalParams.builder()
                .taskConfig(
                    EvalRunEvalParams.TaskConfig.ofBenchmarkEvalTaskConfig(
                        EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.builder()
                            .evalCandidate(
                                EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.EvalCandidate
                                    .ofModelCandidate(
                                        EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig
                                            .EvalCandidate
                                            .ModelCandidate
                                            .builder()
                                            .model("model")
                                            .samplingParams(
                                                SamplingParams.builder()
                                                    .strategy(
                                                        SamplingParams.Strategy
                                                            .ofGreedySamplingStrategy(
                                                                SamplingParams.Strategy
                                                                    .GreedySamplingStrategy
                                                                    .builder()
                                                                    .type(
                                                                        SamplingParams.Strategy
                                                                            .GreedySamplingStrategy
                                                                            .Type
                                                                            .GREEDY
                                                                    )
                                                                    .build()
                                                            )
                                                    )
                                                    .maxTokens(0L)
                                                    .repetitionPenalty(0.0)
                                                    .build()
                                            )
                                            .type(
                                                EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig
                                                    .EvalCandidate
                                                    .ModelCandidate
                                                    .Type
                                                    .MODEL
                                            )
                                            .systemMessage(
                                                SystemMessage.builder()
                                                    .content(InterleavedContent.ofString("string"))
                                                    .role(SystemMessage.Role.SYSTEM)
                                                    .build()
                                            )
                                            .build()
                                    )
                            )
                            .type(
                                EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.Type.BENCHMARK
                            )
                            .numExamples(0L)
                            .build()
                    )
                )
                .taskId("task_id")
                .xLlamaStackClientVersion("X-LlamaStack-Client-Version")
                .xLlamaStackProviderData("X-LlamaStack-Provider-Data")
                .build()
        val body = params.getBody()
        assertThat(body).isNotNull
        assertThat(body.taskConfig())
            .isEqualTo(
                EvalRunEvalParams.TaskConfig.ofBenchmarkEvalTaskConfig(
                    EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.builder()
                        .evalCandidate(
                            EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.EvalCandidate
                                .ofModelCandidate(
                                    EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig
                                        .EvalCandidate
                                        .ModelCandidate
                                        .builder()
                                        .model("model")
                                        .samplingParams(
                                            SamplingParams.builder()
                                                .strategy(
                                                    SamplingParams.Strategy
                                                        .ofGreedySamplingStrategy(
                                                            SamplingParams.Strategy
                                                                .GreedySamplingStrategy
                                                                .builder()
                                                                .type(
                                                                    SamplingParams.Strategy
                                                                        .GreedySamplingStrategy
                                                                        .Type
                                                                        .GREEDY
                                                                )
                                                                .build()
                                                        )
                                                )
                                                .maxTokens(0L)
                                                .repetitionPenalty(0.0)
                                                .build()
                                        )
                                        .type(
                                            EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig
                                                .EvalCandidate
                                                .ModelCandidate
                                                .Type
                                                .MODEL
                                        )
                                        .systemMessage(
                                            SystemMessage.builder()
                                                .content(InterleavedContent.ofString("string"))
                                                .role(SystemMessage.Role.SYSTEM)
                                                .build()
                                        )
                                        .build()
                                )
                        )
                        .type(EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.Type.BENCHMARK)
                        .numExamples(0L)
                        .build()
                )
            )
        assertThat(body.taskId()).isEqualTo("task_id")
    }

    @Test
    fun getBodyWithoutOptionalFields() {
        val params =
            EvalRunEvalParams.builder()
                .taskConfig(
                    EvalRunEvalParams.TaskConfig.ofBenchmarkEvalTaskConfig(
                        EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.builder()
                            .evalCandidate(
                                EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.EvalCandidate
                                    .ofModelCandidate(
                                        EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig
                                            .EvalCandidate
                                            .ModelCandidate
                                            .builder()
                                            .model("model")
                                            .samplingParams(
                                                SamplingParams.builder()
                                                    .strategy(
                                                        SamplingParams.Strategy
                                                            .ofGreedySamplingStrategy(
                                                                SamplingParams.Strategy
                                                                    .GreedySamplingStrategy
                                                                    .builder()
                                                                    .type(
                                                                        SamplingParams.Strategy
                                                                            .GreedySamplingStrategy
                                                                            .Type
                                                                            .GREEDY
                                                                    )
                                                                    .build()
                                                            )
                                                    )
                                                    .build()
                                            )
                                            .type(
                                                EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig
                                                    .EvalCandidate
                                                    .ModelCandidate
                                                    .Type
                                                    .MODEL
                                            )
                                            .build()
                                    )
                            )
                            .type(
                                EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.Type.BENCHMARK
                            )
                            .build()
                    )
                )
                .taskId("task_id")
                .build()
        val body = params.getBody()
        assertThat(body).isNotNull
        assertThat(body.taskConfig())
            .isEqualTo(
                EvalRunEvalParams.TaskConfig.ofBenchmarkEvalTaskConfig(
                    EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.builder()
                        .evalCandidate(
                            EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.EvalCandidate
                                .ofModelCandidate(
                                    EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig
                                        .EvalCandidate
                                        .ModelCandidate
                                        .builder()
                                        .model("model")
                                        .samplingParams(
                                            SamplingParams.builder()
                                                .strategy(
                                                    SamplingParams.Strategy
                                                        .ofGreedySamplingStrategy(
                                                            SamplingParams.Strategy
                                                                .GreedySamplingStrategy
                                                                .builder()
                                                                .type(
                                                                    SamplingParams.Strategy
                                                                        .GreedySamplingStrategy
                                                                        .Type
                                                                        .GREEDY
                                                                )
                                                                .build()
                                                        )
                                                )
                                                .build()
                                        )
                                        .type(
                                            EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig
                                                .EvalCandidate
                                                .ModelCandidate
                                                .Type
                                                .MODEL
                                        )
                                        .build()
                                )
                        )
                        .type(EvalRunEvalParams.TaskConfig.BenchmarkEvalTaskConfig.Type.BENCHMARK)
                        .build()
                )
            )
        assertThat(body.taskId()).isEqualTo("task_id")
    }
}
